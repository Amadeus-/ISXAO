#pragma once

// ReSharper disable once CppClassNeedsConstructorBecauseOfUninitializedMember
class engine_client_anarchy
{
public:
	AOLIB_OBJECT static PCSTR get_breed_str(breed_e breed_id);
	AOLIB_OBJECT character* get_client_char();
	AOLIB_OBJECT p_identity_t get_client_dynel_id(identity_t &id);
	AOLIB_OBJECT DWORD get_current_movement_mode();
	AOLIB_OBJECT n3_engine_client_anarchy_t get_engine_client_anarchy_data() const;
	AOLIB_OBJECT PCSTR get_faction_str(DWORD faction_id, bool full_name);
	AOLIB_OBJECT PCSTR get_faction_title(DWORD faction_id);
	AOLIB_OBJECT PCSTR get_gender_string(identity_t const &id);
	AOLIB_OBJECT p_dummy_item_base_t get_item_by_template(identity_t template_id, const identity_t &container_id);	
	AOLIB_OBJECT static PCSTR get_sex_str(gender_e gender_id);
	AOLIB_OBJECT static PCSTR get_title_string(DWORD base, DWORD level);
	AOLIB_OBJECT bool is_first_login();
	AOLIB_OBJECT bool is_fixture(const identity_t &template_id, const identity_t &container_id);
	AOLIB_OBJECT void n3_msg_activate_mech(DWORD mech_id);
	AOLIB_OBJECT void n3_msg_airstrike(const identity_t &target_id);
	AOLIB_OBJECT void n3_msg_artillery_attack(const identity_t &target_id);
	AOLIB_OBJECT void n3_msg_assist_fight(const identity_t &assist_id);
	AOLIB_OBJECT bool n3_msg_can_attack(identity_t const &target_id);
	AOLIB_OBJECT bool n3_msg_can_click_target_target(const identity_t &identity_1, const identity_t &identity_2);
	AOLIB_OBJECT bool n3_msg_can_use_mech();
	AOLIB_OBJECT void n3_msg_cast_nano_spell(const identity_t &, const identity_t &);
	AOLIB_OBJECT DWORD n3_msg_consider(const identity_t &, float &);
	AOLIB_OBJECT void n3_msg_container_add_item(const identity_t &, const identity_t &);
	AOLIB_OBJECT void n3_msg_crawl_toggle();
	AOLIB_OBJECT void n3_msg_create_raid();
	AOLIB_OBJECT void n3_msg_default_action_on_dynel(const identity_t &);
	AOLIB_OBJECT void n3_msg_default_attack(const identity_t &, bool);
	AOLIB_OBJECT void n3_msg_delete_item(const identity_t &, const identity_t &);
	AOLIB_OBJECT void n3_msg_delete_nano(const identity_t &);
	AOLIB_OBJECT DWORD n3_msg_do_social_action(social_action_e);
	AOLIB_OBJECT void n3_msg_drop_item(const identity_t &, const vector3_t &);
	AOLIB_OBJECT void n3_msg_duel_accept();
	AOLIB_OBJECT void n3_msg_duel_challenge(const identity_t &);
	AOLIB_OBJECT void n3_msg_duel_draw();
	AOLIB_OBJECT void n3_msg_duel_refuse();
	AOLIB_OBJECT void n3_msg_duel_stop();
	AOLIB_OBJECT void n3_msg_forage();
	AOLIB_OBJECT DWORD n3_msg_get_action_by_name(PCSTR);
	AOLIB_OBJECT float n3_msg_get_action_progress(const identity_t &, DWORD*, DWORD*);
	AOLIB_OBJECT LONG n3_msg_get_agg_def();
	AOLIB_OBJECT PCSTR n3_msg_get_alien_level_string(const identity_t &);
	AOLIB_OBJECT void n3_msg_get_area_name(PCSTR*);
	AOLIB_OBJECT bool n3_msg_get_attacking_id(identity_t &);
	AOLIB_OBJECT PCSTR n3_msg_get_breed_str(const identity_t &);
	AOLIB_OBJECT DWORD n3_msg_get_buff_current_time(const identity_t &nano_id, const identity_t &character_id);
	AOLIB_OBJECT DWORD n3_msg_get_buff_total_time(const identity_t &, const identity_t &);
	AOLIB_OBJECT bool n3_msg_get_character_body_shape(BYTE &, identity_t);
	AOLIB_OBJECT bool n3_msg_get_char_orientation_data(const identity_t &, vector3_t &, quaternion_t &, float &);
	AOLIB_OBJECT PCSTR n3_msg_get_city_name_for_clan_member(const identity_t &);
	AOLIB_OBJECT PCSTR n3_msg_get_clan_level_string(const identity_t &);
	AOLIB_OBJECT std::string* n3_msg_get_clan_string(const identity_t &);
	AOLIB_OBJECT p_identity_t n3_msg_get_client_pet_id(identity_t &, DWORD);
	AOLIB_OBJECT bool n3_msg_get_close_target(identity_t &, bool, bool);
	AOLIB_OBJECT PVOID n3_msg_get_container_inventory_list(const identity_t &);
	AOLIB_OBJECT void N3Msg_GetCorrectActionID(identity_t &);
	AOLIB_OBJECT LONG N3Msg_GetCurrentRoom();
	AOLIB_OBJECT PCSTR N3Msg_GetCurrentRoomName();
	AOLIB_OBJECT DWORD N3Msg_GetDistrictFightMode();
	AOLIB_OBJECT bool N3Msg_GetFactionInfoString(const identity_t &, std::string &);
	AOLIB_OBJECT bool N3Msg_GetFactionRange(DWORD, DWORD &, DWORD &);
	AOLIB_OBJECT PCSTR N3Msg_GetFirstName(const identity_t &);
	AOLIB_OBJECT double N3Msg_GetFormulaProgress(const identity_t &, DWORD &, DWORD &);
	AOLIB_OBJECT DWORD N3Msg_GetFormulaRadius(const identity_t &);
	AOLIB_OBJECT void n3_msg_get_global_character_position(vector3_t &);
	AOLIB_OBJECT void N3Msg_GetGlobalCharacterRotation(quaternion_t &);
	AOLIB_OBJECT PVOID N3Msg_GetGridDestinationList() const;
	AOLIB_OBJECT std::vector<p_inventory_data_t>* N3Msg_GetInventoryVec(const identity_t &);
	AOLIB_OBJECT void N3Msg_GetItem(const identity_t &);
	AOLIB_OBJECT double N3Msg_GetItemProgress(const identity_t &, DWORD &, DWORD &);
	AOLIB_OBJECT DWORD N3Msg_GetMovementMode();
	AOLIB_OBJECT PCSTR N3Msg_GetName(const identity_t &, const identity_t &);
	AOLIB_OBJECT DWORD N3Msg_GetNanoCostModifier();
	AOLIB_OBJECT std::list<DWORD>* N3Msg_GetNanoSpellList() const;
	AOLIB_OBJECT std::list<nano_template_t>* N3Msg_GetNanoTemplateInfoList(const identity_t &);
	AOLIB_OBJECT std::list<nano_template_t>* N3Msg_GetNanoTemplateInfoList() const;
	AOLIB_OBJECT p_identity_t N3Msg_GetNextTarget(identity_t &, DWORD);
	AOLIB_OBJECT DWORD N3Msg_GetNumberOfAvailableAlienPerks();
	AOLIB_OBJECT DWORD N3Msg_GetNumberOfAvailablePerks();
	AOLIB_OBJECT DWORD N3Msg_GetNumberOfFreeInventorySlots();
	AOLIB_OBJECT DWORD N3Msg_GetNumberOfUsedAlienPerks();
	AOLIB_OBJECT DWORD N3Msg_GetNumberOfUsedPerks();
	AOLIB_OBJECT DWORD N3Msg_GetOverEquipLevel(const identity_t &);
	AOLIB_OBJECT PCSTR N3Msg_GetPFName(DWORD);
	AOLIB_OBJECT PCSTR N3Msg_GetPFName();
	AOLIB_OBJECT bool N3Msg_GetParent(const identity_t &, identity_t &);
	AOLIB_OBJECT bool N3Msg_GetPos(const identity_t &, vector3_t &);
	AOLIB_OBJECT LONG N3Msg_GetSkill(DWORD, DWORD);
	AOLIB_OBJECT LONG N3Msg_GetSkill(const identity_t &, DWORD, DWORD, const identity_t &);
	AOLIB_OBJECT LONG N3Msg_GetSkillMax(DWORD);
	AOLIB_OBJECT std::list<special_action_t>* N3Msg_GetSpecialActionList() const;
	AOLIB_OBJECT DWORD N3Msg_GetSpecialActionState(const identity_t &);
	AOLIB_OBJECT PCSTR N3Msg_GetSpecialAttackWeaponName(const identity_t &);
	AOLIB_OBJECT p_identity_t N3Msg_GetTargetTarget(identity_t &, const identity_t &);
	AOLIB_OBJECT PVOID N3Msg_GetTeamMemberList(LONG);
	AOLIB_OBJECT bool N3Msg_HasPerk(DWORD);
	AOLIB_OBJECT bool N3Msg_IsAttacking() const;
	AOLIB_OBJECT bool N3Msg_IsBattleStation();
	AOLIB_OBJECT bool N3Msg_IsCharacterInMech(identity_t);
	AOLIB_OBJECT bool N3Msg_IsCharacterMorphed(identity_t);
	AOLIB_OBJECT bool N3Msg_IsDungeon();
	AOLIB_OBJECT bool N3Msg_IsFormulaReady(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsGeneralPerk(DWORD);
	AOLIB_OBJECT bool N3Msg_IsGroupPerk(DWORD);
	AOLIB_OBJECT bool N3Msg_IsInRaidTeam();
	AOLIB_OBJECT bool N3Msg_IsInTeam(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsItemDisabled(const identity_t &, const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsItemMine(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsItemNFCrystal(const identity_t &, const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsItemPossibleToUnWear(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsItemPossibleToWear(const identity_t &, DWORD, DWORD, bool, DWORD);
	AOLIB_OBJECT bool N3Msg_IsMoving();
	AOLIB_OBJECT bool N3Msg_IsMyPetID(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsNanoSelfOnly(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsNpc(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsPerk(DWORD);
	AOLIB_OBJECT bool N3Msg_IsPetTower(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsProfessionPerk(DWORD);
	AOLIB_OBJECT bool N3Msg_IsResearch(DWORD);
	AOLIB_OBJECT bool N3Msg_IsSecondarySpecialAttackAvailable(DWORD);
	AOLIB_OBJECT bool N3Msg_IsShieldDisablerItem(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsSpecialPerk(DWORD);
	AOLIB_OBJECT bool N3Msg_IsTeamLeader(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsTeamMission(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsTeamMissionCopy(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsTeamNano(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsTower(const identity_t &);
	AOLIB_OBJECT bool N3Msg_IsVisible(const identity_t &);
	AOLIB_OBJECT bool N3Msg_JoinItems(const identity_t &, const identity_t &);
	AOLIB_OBJECT void N3Msg_KickTeamMember(const identity_t &);
	AOLIB_OBJECT void N3Msg_LeaveBattle();
	AOLIB_OBJECT void N3Msg_LeaveTeam();
	AOLIB_OBJECT bool N3Msg_MeetsPerkCriteria(DWORD);
	AOLIB_OBJECT bool N3Msg_MoveItemToInventory(const identity_t &, DWORD, DWORD);
	AOLIB_OBJECT void N3Msg_MoveRaidMember(const identity_t &, DWORD);
	AOLIB_OBJECT bool N3Msg_NameToID(const std::string &, identity_t &);
	AOLIB_OBJECT void N3Msg_NPCChatAddTradeItem(const identity_t &, const identity_t &, const identity_t &);
	AOLIB_OBJECT void N3Msg_NPCChatCloseWindow(const identity_t &, const identity_t &);
	AOLIB_OBJECT void N3Msg_NPCChatEndTrade(const identity_t &, const identity_t &, DWORD, bool);
	AOLIB_OBJECT void N3Msg_NPCChatRemoveTradeItem(const identity_t &, const identity_t &, const identity_t &);
	AOLIB_OBJECT void N3Msg_NPCChatRequestDescription(const identity_t &, const identity_t &);
	AOLIB_OBJECT void N3Msg_NPCChatStartTrade(const identity_t &, const identity_t &);
	AOLIB_OBJECT void N3Msg_OrbitalAttack(const identity_t &);
	AOLIB_OBJECT bool N3Msg_PerformSpecialAction(DWORD);
	AOLIB_OBJECT bool N3Msg_PerformSpecialAction(const identity_t &);
	AOLIB_OBJECT void N3Msg_PetDuel_Accept();
	AOLIB_OBJECT void N3Msg_PetDuel_Challenge(const identity_t &);
	AOLIB_OBJECT void N3Msg_PetDuel_Refuse();
	AOLIB_OBJECT void N3Msg_PetDuel_Stop();
	AOLIB_OBJECT bool N3Msg_RemoveBuff(const identity_t &);
	AOLIB_OBJECT void N3Msg_RemoveQuest(const identity_t &);
	AOLIB_OBJECT std::list<inventory_entry_t>* N3Msg_RequestCharacterInventory();
	AOLIB_OBJECT std::list<inventory_entry_t>* N3Msg_RequestClothInventory(const identity_t &);
	AOLIB_OBJECT std::list<inventory_entry_t>* N3Msg_RequestImplantInventory(const identity_t &);
	AOLIB_OBJECT std::list<inventory_entry_t>* N3Msg_RequestSocialInventory(const identity_t &);
	AOLIB_OBJECT std::list<inventory_entry_t>* N3Msg_RequestWeaponInventory(const identity_t &);
	AOLIB_OBJECT bool N3Msg_SecondarySpecialAttack(const identity_t &, DWORD);
	AOLIB_OBJECT void N3Msg_SelectedTarget(const identity_t&);
	AOLIB_OBJECT void N3Msg_SendPetCommand(DWORD, const identity_t &, DWORD, DWORD, PCSTR); // 0, PetIdentity&, PetCommand_e, 0, nullptr
	AOLIB_OBJECT void N3Msg_SitToggle();
	AOLIB_OBJECT bool N3Msg_SplitItem(const identity_t &, DWORD);
	AOLIB_OBJECT void N3Msg_StartAltState();
	AOLIB_OBJECT bool N3Msg_StartCamping();
	AOLIB_OBJECT void N3Msg_StartPvP(const identity_t &);
	AOLIB_OBJECT bool N3Msg_StartTreatment(const identity_t &);
	AOLIB_OBJECT void N3Msg_StopAltState();
	AOLIB_OBJECT void N3Msg_StopAttack();
	AOLIB_OBJECT void N3Msg_StopCamping();
	AOLIB_OBJECT DWORD N3Msg_StringToStat(PCSTR);
	AOLIB_OBJECT void N3Msg_SwitchTarget(const identity_t &);
	AOLIB_OBJECT bool N3Msg_TeamJoinRequest(const identity_t &, bool);
	AOLIB_OBJECT p_identity_t N3Msg_TemplateIDToDynelID(identity_t &, const identity_t &); // dummy, template
	AOLIB_OBJECT bool N3Msg_TextCommand(DWORD, PCSTR, const identity_t &);
	AOLIB_OBJECT void N3Msg_ToggleReclaim(bool);
	AOLIB_OBJECT void N3Msg_TradeAbort(bool);
	AOLIB_OBJECT void N3Msg_TradeAccept();
	AOLIB_OBJECT void N3Msg_TradeAddItem(const identity_t &, const identity_t &, DWORD);
	AOLIB_OBJECT void N3Msg_TradeConfirm();
	AOLIB_OBJECT PVOID N3Msg_TradeGetInventory(const identity_t &);
	AOLIB_OBJECT DWORD N3Msg_TradeGetInventoryCost(const identity_t &);
	AOLIB_OBJECT void N3Msg_TradeRemoveItem(const identity_t &, const identity_t &);
	AOLIB_OBJECT void N3Msg_TradeSetCash(DWORD);
	AOLIB_OBJECT void N3Msg_TradeStart(const identity_t &);
	AOLIB_OBJECT void N3Msg_TradeskillCombine(const identity_t &, const identity_t &);
	AOLIB_OBJECT bool N3Msg_TrainPerk(DWORD);
	AOLIB_OBJECT void N3Msg_TransferTeamLeadership(const identity_t &);
	AOLIB_OBJECT void N3Msg_TryAbortNanoFormula();
	AOLIB_OBJECT void N3Msg_TryEnterSneakMode();
	AOLIB_OBJECT bool N3Msg_UntrainPerk(DWORD);
	AOLIB_OBJECT void N3Msg_UseItem(const identity_t &, bool);
	AOLIB_OBJECT void N3Msg_UseItemOnItem(const identity_t &, const identity_t &);	


	private:
	// ReSharper disable once CppUninitializedNonStaticDataMember
	n3_engine_client_anarchy_t n3_engine_client_anarchy_;






};
