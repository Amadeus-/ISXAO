#pragma once
#include "game_object.h"

namespace std
{
	template <typename _Tp, typename _Alloc>
	class list;
	template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
	class map;
	template <typename _Tp, typename _Alloc>
	class vector;
}

namespace ao
{
	class character;

	enum breed_e : unsigned long;
	enum gender_e : unsigned long;
	enum movement_action_e : unsigned long;
	enum profession_e : unsigned long;
	enum side_e : unsigned long;
	enum social_action_e : unsigned long;
	enum stat_e : unsigned long;
	enum type_id_e : unsigned long;

	struct ao_dummy_item_base;
	struct ao_identity;
	struct ao_inventory_data;
	struct ao_inventory_entry;
	struct ao_inventory_holder;
	struct ao_n3_engine_client_anarchy;
	struct ao_nano_item;
	struct ao_nano_template;
	struct ao_special_action;
	struct ao_vector3;
	struct ao_quaternion;

	typedef ao_dummy_item_base dummy_item_base_t, *p_dummy_item_base_t;
	typedef ao_identity identity_t, *p_identity_t;
	typedef ao_inventory_data inventory_data_t, *p_inventory_data_t;
	typedef ao_inventory_entry inventory_entry_t, *p_inventory_entry_t;
	typedef ao_inventory_holder inventory_holder_t, *p_inventory_holder_t;
	typedef ao_n3_engine_client_anarchy n3_engine_client_anarchy_t, *p_n3_engine_client_anarchy;
	typedef ao_nano_item nano_item_t, *p_nano_item_t;
	typedef ao_nano_template nano_template_t, *p_nano_template_t;
	typedef ao_special_action special_action_t, *p_special_action_t;
	typedef ao_vector3 vector3_t, *p_vector3_t;
	typedef ao_quaternion quaternion_t, *p_quaternion_t;

	class engine_client_anarchy : public game_object<ao::n3_engine_client_anarchy_t>
	{
	public:
		static const char* get_breed_str(ao::breed_e breed_id);
		ao::character* get_client_char();
		ao::p_identity_t get_client_dynel_id(ao::identity_t &id);
		unsigned long get_current_movement_mode();
		const char* get_faction_str(unsigned long faction_id, bool full_name);
		const char* get_faction_title(unsigned long faction_id);
		const char* get_gender_string(ao::identity_t const &id);
		ao::p_dummy_item_base_t get_item_by_template(ao::identity_t template_id, const ao::identity_t &container_id);
		int get_last_speed_mode();
		static const char* get_item_rarity_str(unsigned long rarity_id);
		static ao::p_nano_item_t get_nano_item(unsigned long nano_id);
		static const char* get_nano_school_str(unsigned long school_id);
		static const char* get_profession_str(ao::profession_e prof_id);
		static const char* get_sex_str(ao::gender_e gender_id);
		static const char* get_side_str(ao::side_e side_id);
		static unsigned long get_static_item_map(std::map<ao::identity_t, ao::p_dummy_item_base_t>& m);
		static const char* get_title_string(unsigned long base, unsigned long level);
		bool is_first_login();
		bool is_fixture(const ao::identity_t &template_id, const ao::identity_t &container_id);
		void n3_msg_activate_mech(unsigned long mech_id);
		void n3_msg_airstrike(const ao::identity_t &target_id);
		void n3_msg_artillery_attack(const ao::identity_t &target_id);
		void n3_msg_assist_fight(const ao::identity_t &assist_id);
		bool n3_msg_can_attack(ao::identity_t const &target_id);
		bool n3_msg_can_click_target_target(const ao::identity_t &identity_1, const ao::identity_t &identity_2);
		bool n3_msg_can_use_mech();
		void n3_msg_cast_nano_spell(const ao::identity_t &, const ao::identity_t &);
		unsigned long n3_msg_consider(const ao::identity_t &, float &);
		void n3_msg_container_add_item(const ao::identity_t &, const ao::identity_t &);
		void n3_msg_crawl_toggle();
		void n3_msg_create_raid();
		void n3_msg_default_action_on_dynel(const ao::identity_t &);
		void n3_msg_default_attack(const ao::identity_t &, bool);
		void n3_msg_delete_item(const ao::identity_t &, const ao::identity_t &);
		void n3_msg_delete_nano(const ao::identity_t &);
		unsigned long n3_msg_do_social_action(ao::social_action_e);
		void n3_msg_drop_item(const ao::identity_t &, const ao::vector3_t &);
		void n3_msg_duel_accept();
		void n3_msg_duel_challenge(const ao::identity_t &);
		void n3_msg_duel_draw();
		void n3_msg_duel_refuse();
		void n3_msg_duel_stop();
		void n3_msg_forage();
		unsigned long n3_msg_get_action_by_name(const char*);
		float n3_msg_get_action_progress(const ao::identity_t &, unsigned long*, unsigned long*);
		long n3_msg_get_agg_def();
		const char* n3_msg_get_alien_level_string(const ao::identity_t &);
		void n3_msg_get_area_name(const char**);
		bool n3_msg_get_attacking_id(ao::identity_t &);
		const char* n3_msg_get_breed_str(const ao::identity_t &);
		unsigned long n3_msg_get_buff_current_time(const ao::identity_t &nano_id, const ao::identity_t &character_id);
		unsigned long n3_msg_get_buff_total_time(const ao::identity_t &, const ao::identity_t &);
		bool n3_msg_get_character_body_shape(unsigned char &, ao::identity_t);
		bool n3_msg_get_char_orientation_data(const ao::identity_t &, ao::vector3_t &, ao::quaternion_t &, float &);
		const char* n3_msg_get_city_name_for_clan_member(const ao::identity_t &);
		const char* n3_msg_get_clan_level_string(const ao::identity_t &);
		std::string* n3_msg_get_clan_string(const ao::identity_t &);
		ao::p_identity_t n3_msg_get_client_pet_id(ao::identity_t &, unsigned long);
		bool n3_msg_get_close_target(ao::identity_t &, bool, bool);
		ao::p_inventory_holder_t n3_msg_get_container_inventory_list(const ao::identity_t &);
		void n3_msg_get_correct_action_id(ao::identity_t &);
		long n3_msg_get_current_room();
		const char* n3_msg_get_current_room_name();
		unsigned long n3_msg_get_district_fight_mode();
		void n3_msg_get_dynels_in_vicinity(std::vector<ao::identity_t>&, bool, bool, ao::type_id_e);
		bool n3_msg_get_faction_info_string(const ao::identity_t &, std::string &);
		bool n3_msg_get_faction_range(unsigned long, unsigned long &, unsigned long &);
		const char* n3_msg_get_first_name(const ao::identity_t &);
		double n3_msg_get_formula_progress(const ao::identity_t &, unsigned long &, unsigned long &);
		unsigned long n3_msg_get_formula_radius(const ao::identity_t &);
		static unsigned long n3_msg_get_full_perk_map();
		void n3_msg_get_global_character_position(ao::vector3_t &);
		void n3_msg_get_global_character_rotation(ao::quaternion_t &);
		void* n3_msg_get_grid_destination_list(const ao::identity_t &);
		void* n3_msg_get_grid_destination_list();
		std::vector<ao::p_inventory_data_t>* n3_msg_get_inventory_vec(const ao::identity_t &);
		void n3_msg_get_item(const ao::identity_t &);
		double n3_msg_get_item_progress(const ao::identity_t &, unsigned long &, unsigned long &);
		unsigned long n3_msg_get_movement_mode();
		const char* n3_msg_get_name(const ao::identity_t &, const ao::identity_t &);
		unsigned long n3_msg_get_nano_cost_modifier();
		std::list<unsigned long>* n3_msg_get_nano_spell_list();
		std::list<ao::nano_template_t>* n3_msg_get_nano_template_info_list(const ao::identity_t &);
		std::list<ao::nano_template_t>* n3_msg_get_nano_template_info_list();
		ao::p_identity_t n3_msg_get_next_target(ao::identity_t &, unsigned long);
		unsigned long n3_msg_get_number_of_available_alien_perks();
		unsigned long n3_msg_get_number_of_available_perks();
		unsigned long n3_msg_get_number_of_free_inventory_slots();
		unsigned long n3_msg_get_number_of_used_alien_perks();
		unsigned long n3_msg_get_number_of_used_perks();
		unsigned long n3_msg_get_over_equip_level(const ao::identity_t &);
		const char* n3_msg_get_pf_name(unsigned long);
		const char* n3_msg_get_pf_name();
		bool n3_msg_get_parent(const ao::identity_t &, ao::identity_t &);
		bool n3_msg_get_pos(const ao::identity_t &, ao::vector3_t &);
		long n3_msg_get_skill(unsigned long, unsigned long);
		long n3_msg_get_skill(const ao::identity_t &, unsigned long, unsigned long, const ao::identity_t &);
		long n3_msg_get_skill_max(unsigned long);
		std::list<ao::special_action_t>* n3_msg_get_special_action_list();
		unsigned long n3_msg_get_special_action_state(const ao::identity_t &);
		const char* n3_msg_get_special_attack_weapon_name(const ao::identity_t &);
		static void* n3_msg_get_stat_name_map();
		ao::p_identity_t N3Msg_GetTargetTarget(ao::identity_t &, const ao::identity_t &);
		void* n3_msg_get_team_member_list(long);
		bool n3_msg_has_perk(unsigned long);
		void n3_msg_hide_against_opponent(const ao::identity_t&);
		bool n3_msg_is_attacking();
		bool n3_msg_is_battle_station();
		bool n3_msg_is_character_in_mech(ao::identity_t);
		bool n3_msg_is_character_morphed(ao::identity_t);
		bool n3_msg_is_dungeon();
		bool n3_msg_is_formula_ready(const ao::identity_t &);
		bool n3_msg_is_general_perk(unsigned long);
		bool n3_msg_is_group_perk(unsigned long);
		bool n3_msg_is_in_raid_team();
		bool n3_msg_is_in_team(const ao::identity_t &);
		bool n3_msg_is_item_disabled(const ao::identity_t &, const ao::identity_t &);
		bool n3_msg_is_item_mine(const ao::identity_t &);
		bool n3_msg_is_item_nf_crystal(const ao::identity_t &, const ao::identity_t &);
		bool n3_msg_is_item_possible_to_un_wear(const ao::identity_t &);
		bool n3_msg_is_item_possible_to_wear(const ao::identity_t &, unsigned long, unsigned long, bool, unsigned long);
		bool n3_msg_is_moving();
		bool n3_msg_is_my_pet_id(const ao::identity_t &);
		bool n3_msg_is_nano_self_only(const ao::identity_t &);
		bool n3_msg_is_npc(const ao::identity_t &);
		bool n3_msg_is_perk(unsigned long);
		bool N3Msg_IsPetTower(const ao::identity_t &);
		bool N3Msg_IsProfessionPerk(unsigned long);
		bool N3Msg_IsResearch(unsigned long);
		bool N3Msg_IsSecondarySpecialAttackAvailable(unsigned long);
		bool N3Msg_IsShieldDisablerItem(const ao::identity_t &);
		bool N3Msg_IsSpecialPerk(unsigned long);
		bool N3Msg_IsTeamLeader(const ao::identity_t &);
		bool N3Msg_IsTeamMission(const ao::identity_t &);
		bool N3Msg_IsTeamMissionCopy(const ao::identity_t &);
		bool N3Msg_IsTeamNano(const ao::identity_t &);
		bool N3Msg_IsTower(const ao::identity_t &);
		bool N3Msg_IsVisible(const ao::identity_t &);
		bool N3Msg_JoinItems(const ao::identity_t &, const ao::identity_t &);
		void N3Msg_KickTeamMember(const ao::identity_t &);
		void N3Msg_LeaveBattle();
		void N3Msg_LeaveTeam();
		bool N3Msg_MeetsPerkCriteria(unsigned long);
		bool N3Msg_MoveItemToInventory(const ao::identity_t &, unsigned long, unsigned long);
		void N3Msg_MoveRaidMember(const ao::identity_t &, unsigned long);
		void n3_msg_movement_changed(ao::movement_action_e, float, float, bool);
		bool n3_msg_name_to_id(const std::string &, ao::identity_t &);
		void N3Msg_NPCChatAddTradeItem(const ao::identity_t &, const ao::identity_t &, const ao::identity_t &);
		void N3Msg_NPCChatCloseWindow(const ao::identity_t &, const ao::identity_t &);
		void N3Msg_NPCChatEndTrade(const ao::identity_t &, const ao::identity_t &, unsigned long, bool);
		void N3Msg_NPCChatRemoveTradeItem(const ao::identity_t &, const ao::identity_t &, const ao::identity_t &);
		void N3Msg_NPCChatRequestDescription(const ao::identity_t &, const ao::identity_t &);
		void N3Msg_NPCChatStartTrade(const ao::identity_t &, const ao::identity_t &);
		void N3Msg_OrbitalAttack(const ao::identity_t &);
		bool n3_msg_perform_special_action(unsigned long);
		bool n3_msg_perform_special_action(const ao::identity_t &);
		void N3Msg_PetDuel_Accept();
		void N3Msg_PetDuel_Challenge(const ao::identity_t &);
		void N3Msg_PetDuel_Refuse();
		void N3Msg_PetDuel_Stop();
		bool N3Msg_RemoveBuff(const ao::identity_t &);
		void N3Msg_RemoveQuest(const ao::identity_t &);
		std::list<ao::inventory_entry_t>* N3Msg_RequestCharacterInventory();
		std::list<ao::inventory_entry_t>* N3Msg_RequestClothInventory(const ao::identity_t &);
		std::list<ao::inventory_entry_t>* N3Msg_RequestImplantInventory(const ao::identity_t &);
		void n3_msg_request_info_packet(const ao::identity_t &);
		std::list<ao::inventory_entry_t>* N3Msg_RequestSocialInventory(const ao::identity_t &);
		std::list<ao::inventory_entry_t>* N3Msg_RequestWeaponInventory(const ao::identity_t &);
		bool N3Msg_SecondarySpecialAttack(const ao::identity_t &, unsigned long);
		void N3Msg_SelectedTarget(const ao::identity_t&);
		void n3_msg_send_pet_command(unsigned long, const ao::identity_t &, unsigned long, unsigned long, const char*); // 0, PetIdentity&, PetCommand_e, 0, nullptr
		void n3_msg_sit_toggle();
		bool N3Msg_SplitItem(const ao::identity_t &, unsigned long);
		void N3Msg_StartAltState();
		bool N3Msg_StartCamping();
		void N3Msg_StartPvP(const ao::identity_t &);
		bool N3Msg_StartTreatment(const ao::identity_t &);
		void N3Msg_StopAltState();
		void n3_msg_stop_attack();
		void N3Msg_StopCamping();
		unsigned long N3Msg_StringToStat(const char*);
		void N3Msg_SwitchTarget(const ao::identity_t &);
		bool N3Msg_TeamJoinRequest(const ao::identity_t &, bool);
		ao::p_identity_t N3Msg_TemplateIDToDynelID(ao::identity_t &, const ao::identity_t &); // dummy, template
		bool N3Msg_TextCommand(unsigned long, const char*, const ao::identity_t &);
		void N3Msg_ToggleReclaim(bool);
		void N3Msg_TradeAbort(bool);
		void N3Msg_TradeAccept();
		void N3Msg_TradeAddItem(const ao::identity_t &, const ao::identity_t &, unsigned long);
		void N3Msg_TradeConfirm();
		void* N3Msg_TradeGetInventory(const ao::identity_t &);
		unsigned long N3Msg_TradeGetInventoryCost(const ao::identity_t &);
		void N3Msg_TradeRemoveItem(const ao::identity_t &, const ao::identity_t &);
		void N3Msg_TradeSetCash(unsigned long);
		void N3Msg_TradeStart(const ao::identity_t &);
		void N3Msg_TradeskillCombine(const ao::identity_t &, const ao::identity_t &);
		bool N3Msg_TrainPerk(unsigned long);
		void N3Msg_TransferTeamLeadership(const ao::identity_t &);
		void N3Msg_TryAbortNanoFormula();
		void N3Msg_TryEnterSneakMode();
		bool N3Msg_UntrainPerk(unsigned long);
		void n3_msg_use_item(const ao::identity_t &, bool);
		void N3Msg_UseItemOnItem(const ao::identity_t &, const ao::identity_t &);
		static const char* stat_to_string(ao::stat_e stat_id);

	};
}